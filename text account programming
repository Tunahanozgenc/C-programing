#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Data structure: The word itself and how many times it appears
typedef struct {
    char* word;
    int count;
} WordCount;

// Helper function to check if a word exists in the array
int wordExists(const WordCount* words, int wordCount, const char* word) {
    for (int i = 0; i < wordCount; i++) {
        if (strcmp(words[i].word, word) == 0) {
            return i;
        }
    }
    return -1;
}

int main() {
    char text[1000];
    printf("Enter text: "); // Prompt the user to enter text
    fgets(text, sizeof(text), stdin);

    // Array to store words and their counts
    WordCount* wordCounts = NULL;
    int wordCount = 0;

    // Split the text by spaces and count the words
    char* token = strtok(text, " ");
    while (token != NULL) {
        // Remove the newline character if present
        int length = strlen(token);
        if (token[length - 1] == '\n') {
            token[length - 1] = '\0';
        }

        // Check if the word already exists in the array
        int index = wordExists(wordCounts, wordCount, token);
        if (index != -1) {
            // Word exists in the array, increment its count
            wordCounts[index].count++;
        } else {
            // Word does not exist in the array, add it
            wordCount++;
            wordCounts = realloc(wordCounts, sizeof(WordCount) * wordCount);
            wordCounts[wordCount - 1].word = strdup(token);
            wordCounts[wordCount - 1].count = 1;
        }

        // Get the next word
        token = strtok(NULL, " ");
    }

    // Print the results
    printf("\nWords and Their Counts:\n");
    for (int i = 0; i < wordCount; i++) {
        printf("%s: %d\n", wordCounts[i].word, wordCounts[i].count);
        free(wordCounts[i].word);
    }

    // Clean up memory
    free(wordCounts);

    return 0;
}
